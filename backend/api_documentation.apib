FORMAT: 1A
HOST: http://localhost:8000/api

# Bridge Game API

Bridge Game API is a RESTful API for user authentication and management in a Bridge card game application.

## Authentication [/auth]

### Register User [POST /auth/register/]

Create a new user account with email and password.

+ Request (application/json)

        {
            "username": "johndoe",
            "email": "john@example.com",
            "password": "SecurePass123!",
            "password2": "SecurePass123!",
            "first_name": "John",
            "last_name": "Doe"
        }

+ Response 201 (application/json)

        {
            "user": {
                "id": 1,
                "username": "johndoe",
                "email": "john@example.com",
                "first_name": "John",
                "last_name": "Doe",
                "date_joined": "2025-09-01T12:00:00Z",
                "profile": {
                    "display_name": "",
                    "preferred_system": "",
                    "timezone": "UTC",
                    "bio": ""
                }
            },
            "tokens": {
                "refresh": "eyJ0eXAiOiJKV1QiLCJhbGc...",
                "access": "eyJ0eXAiOiJKV1QiLCJhbGc..."
            }
        }

### Login [POST /auth/login/]

Authenticate user with email and password.

+ Request (application/json)

        {
            "email": "john@example.com",
            "password": "SecurePass123!"
        }

+ Response 200 (application/json)

        {
            "user": {
                "id": 1,
                "username": "johndoe",
                "email": "john@example.com",
                "first_name": "John",
                "last_name": "Doe",
                "date_joined": "2025-09-01T12:00:00Z",
                "profile": {
                    "display_name": "John",
                    "preferred_system": "acol",
                    "timezone": "UTC",
                    "bio": "Bridge enthusiast"
                }
            },
            "tokens": {
                "refresh": "eyJ0eXAiOiJKV1QiLCJhbGc...",
                "access": "eyJ0eXAiOiJKV1QiLCJhbGc..."
            }
        }

### Logout [POST /auth/logout/]

Logout user and blacklist the refresh token.

+ Request (application/json)
    + Headers

            Authorization: Bearer {access_token}

    + Body

            {
                "refresh_token": "eyJ0eXAiOiJKV1QiLCJhbGc..."
            }

+ Response 200 (application/json)

        {
            "detail": "Successfully logged out"
        }

## User Profile [/auth/profile/]

### Get User Profile [GET]

Retrieve the authenticated user's profile information.

+ Request
    + Headers

            Authorization: Bearer {access_token}

+ Response 200 (application/json)

        {
            "id": 1,
            "username": "johndoe",
            "email": "john@example.com",
            "first_name": "John",
            "last_name": "Doe",
            "date_joined": "2025-09-01T12:00:00Z",
            "profile": {
                "display_name": "John",
                "preferred_system": "acol",
                "timezone": "UTC",
                "bio": "Bridge enthusiast"
            }
        }

### Update User Profile [PUT]

Update the authenticated user's profile information.

+ Request (application/json)
    + Headers

            Authorization: Bearer {access_token}

    + Body

            {
                "first_name": "John",
                "last_name": "Smith"
            }

+ Response 200 (application/json)

        {
            "id": 1,
            "username": "johndoe",
            "email": "john@example.com",
            "first_name": "John",
            "last_name": "Smith",
            "date_joined": "2025-09-01T12:00:00Z",
            "profile": {
                "display_name": "John",
                "preferred_system": "acol",
                "timezone": "UTC",
                "bio": "Bridge enthusiast"
            }
        }

## Profile Details [/auth/profile/update/]

### Get Profile Details [GET]

Retrieve specific profile fields.

+ Request
    + Headers

            Authorization: Bearer {access_token}

+ Response 200 (application/json)

        {
            "display_name": "John",
            "preferred_system": "acol",
            "timezone": "America/New_York",
            "bio": "Bridge enthusiast and tournament player"
        }

### Update Profile Details [PUT]

Update specific profile fields like display name, timezone, bio, etc.

+ Request (application/json)
    + Headers

            Authorization: Bearer {access_token}

    + Body

            {
                "display_name": "JohnnyB",
                "preferred_system": "standard_american",
                "timezone": "America/New_York",
                "bio": "Tournament bridge player"
            }

+ Response 200 (application/json)

        {
            "display_name": "JohnnyB",
            "preferred_system": "standard_american",
            "timezone": "America/New_York",
            "bio": "Tournament bridge player"
        }

## Password Management [/auth/password]

### Request Password Reset [POST /auth/password/reset/]

Send a password reset code to the user's email address.

+ Request (application/json)

        {
            "email": "john@example.com"
        }

+ Response 200 (application/json)

        {
            "detail": "Password reset code has been sent to your email."
        }

### Confirm Password Reset [POST /auth/password/reset/confirm/]

Reset password using the code sent to email.

+ Request (application/json)

        {
            "email": "john@example.com",
            "reset_code": "AbCdEfGhIjKlMnOpQrStUvWxYz123456",
            "new_password": "NewSecurePass456!"
        }

+ Response 200 (application/json)

        {
            "detail": "Password has been reset successfully."
        }

### Change Password [POST /auth/password/change/]

Change the authenticated user's password.

+ Request (application/json)
    + Headers

            Authorization: Bearer {access_token}

    + Body

            {
                "old_password": "CurrentPass123!",
                "new_password": "NewSecurePass456!"
            }

+ Response 200 (application/json)

        {
            "detail": "Password changed successfully."
        }

## Token Management [/auth/token]

### Refresh Token [POST /auth/token/refresh/]

Get a new access token using a refresh token.

+ Request (application/json)

        {
            "refresh": "eyJ0eXAiOiJKV1QiLCJhbGc..."
        }

+ Response 200 (application/json)

        {
            "access": "eyJ0eXAiOiJKV1QiLCJhbGc..."
        }